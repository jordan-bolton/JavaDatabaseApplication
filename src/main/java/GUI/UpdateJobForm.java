/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Account.Mechanic;
import Core.Control;
import DatabaseConnect.DBConnect;
import Processing.Invoice;
import Processing.Job;
import static Processing.PDFCreator.getAddressTable;
import static Processing.PDFCreator.getLineItemTable;
import Processing.Task;
import StockControl.Part;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.property.TextAlignment;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author jly09
 */
public class UpdateJobForm extends javax.swing.JFrame {

    public static final String BOLD = "resources/fonts/OpenSans-Bold.ttf";
    Job selectedJob;
    String searchText;
    String searchFilter;
    Control control;
    DBConnect dbConnect;
    ArrayList<Mechanic> mechanics = new ArrayList<Mechanic>();
    ArrayList<Part> spareParts = new ArrayList<Part>();
    DefaultTableModel modelUncompleted;
    DefaultTableModel modelCompleted;
    DefaultTableModel modelParts;
    int clearTaskRequired = 0;
    int clearTaskDone = 0;
    int MAX_QUANTITY = 0;
    JobForm allJobs;

    /**
     * Creates new form MenuForm
     */
    public UpdateJobForm() {
        initComponents();
        dbConnect = new DBConnect();
    }
    
    public UpdateJobForm(Control c) {
        initComponents();
        control = c;
        dbConnect = control.getDatabaseConnector();
    }

    public UpdateJobForm(Job selectedJob, String searchText,
            String searchFilter, JobForm allJobs) {
        initComponents();
        this.selectedJob = selectedJob;
        dbConnect = new DBConnect();
        this.searchFilter = searchFilter;
        this.searchText = searchText;
        this.allJobs = allJobs;
    }
    
    public UpdateJobForm(Control control, Job selectedJob, String searchText,
            String searchFilter, JobForm allJobs) {
        initComponents();
        this.control = control;
        this.selectedJob = selectedJob;
        dbConnect = control.getDatabaseConnector();
        this.searchFilter = searchFilter;
        this.searchText = searchText;
        this.allJobs = allJobs;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jDialog3 = new javax.swing.JDialog();
        jDialog4 = new javax.swing.JDialog();
        popupMenu1 = new java.awt.PopupMenu();
        jDialog5 = new javax.swing.JDialog();
        jDialog6 = new javax.swing.JDialog();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog4Layout = new javax.swing.GroupLayout(jDialog4.getContentPane());
        jDialog4.getContentPane().setLayout(jDialog4Layout);
        jDialog4Layout.setHorizontalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog4Layout.setVerticalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        popupMenu1.setLabel("popupMenu1");

        javax.swing.GroupLayout jDialog5Layout = new javax.swing.GroupLayout(jDialog5.getContentPane());
        jDialog5.getContentPane().setLayout(jDialog5Layout);
        jDialog5Layout.setHorizontalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog5Layout.setVerticalGroup(
            jDialog5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jDialog6.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout jDialog6Layout = new javax.swing.GroupLayout(jDialog6.getContentPane());
        jDialog6.getContentPane().setLayout(jDialog6Layout);
        jDialog6Layout.setHorizontalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog6Layout.setVerticalGroup(
            jDialog6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTextField2.setText("Add Task (use enter key)");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
        });
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Update Job");

        jButton5.setText("Update");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Status");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel4.setText("Parts");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Name");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Qty");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Work required");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Done" }));

        jButton6.setText("Add Parts");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jButton7.setText("Remove Part");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Duration (hours)");

        jButton8.setText("Cancel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MOT Car", "Annual Service", "Repair", "MOT Van" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Mechanic");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Work carried out");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Completed", "task_id", "job_id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task", "Completed", "task_id", "job_id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable4.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable4InputMethodTextChanged(evt);
            }
        });
        jTable4.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable4PropertyChange(evt);
            }
        });
        jTable4.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jTable4VetoableChange(evt);
            }
        });
        jScrollPane6.setViewportView(jTable4);

        jButton1.setText("Apply changes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Apply changes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField4.setText("Add Task (use enter key)");
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
        });
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.setText("Add Task (use enter key)");
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField5FocusGained(evt);
            }
        });
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Task");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Task");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Part", "Quantity", "part_used_id", "part_id", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable6);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setText("Qty");

        jButton9.setText("Complete Job");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2))
                                .addComponent(jLabel5)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton7)))
                            .addGap(59, 59, 59)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(11, 11, 11))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel9))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(71, 71, 71)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(47, 47, 47)
                                    .addComponent(jLabel7)
                                    .addGap(34, 34, 34)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton1))
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton3))
                                .addComponent(jButton9))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton4))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(109, 109, 109)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(361, 361, 361)))
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jButton6)
                            .addComponent(jButton7))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(jButton2)
                                        .addComponent(jButton1)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton9)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton3)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton4)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int[] selectedRow = jTable6.getSelectedRows();
        if (selectedRow.length == 0) {
            //Display window requiring user to select a job to update first
            JOptionPane.showMessageDialog(UpdateJobForm.this,
                    "Select a part to delete first");

        } else {
            int qtyUsed = (int) modelParts.getValueAt(selectedRow[0], 1);
            int partId = (int) modelParts.getValueAt(selectedRow[0], 3);
            String deletePartQuery = "DELETE FROM Part_Used WHERE "
                    + "part_used_id=" + modelParts.getValueAt(selectedRow[0], 2);
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(deletePartQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }

            String updateQuantityQuery = "UPDATE Parts SET part_quantity="
                    + "part_quantity+" + qtyUsed + " WHERE part_id=" + partId;
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(updateQuantityQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }

            for (Part part : spareParts) {
                if (part.getPartId() == partId) {
                    int maxQty = part.getQty();
                    part.setQty(maxQty + qtyUsed);
                    jSlider1.setMaximum(part.getQty());
                }
            }

            //UPDATE QTY AND REQUERY
            modelParts.setRowCount(0);
            String partUsedQuery = "SELECT parts.part_price, Part_Used.part_id, parts.part_name, Part_Used.part_used_id, Part_Used.quantity_used \n"
                    + "FROM garitsdb.Parts, garitsdb.Part_Used "
                    + "WHERE garitsdb.Part_Used.part_id = garitsdb.Parts.part_id "
                    + "AND garitsdb.Part_Used.job_id = '" + selectedJob.getJobId() + "';";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(partUsedQuery);
                ResultSet rs = statement.executeQuery();
                while (rs.next()) {
                    Part part = new Part();
                    part.setPartId(rs.getInt("part_id"));
                    part.setPartUsedId(rs.getInt("part_used_id"));
                    part.setQty(rs.getInt("quantity_used"));
                    part.setName(rs.getString("part_name"));
                    part.setPrice(rs.getFloat("part_price"));
                    Object[] row = {part.getName(),
                        part.getQty(), part.getPartUsedId(),
                        part.getPartId(), part.getPrice()};
                    modelParts.addRow(row);
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Getting input values
        Job updatedJob = new Job();
        Mechanic selectedMechanic = new Mechanic();
        for (Mechanic mechanic : mechanics) {
            if (mechanic.getName().equals(jComboBox6.getSelectedItem())) {
                selectedMechanic.setId(mechanic.getId());
                selectedMechanic.setName(mechanic.getName());
            }
        }
        //Extremely convoluted way to update my Job object due to some string processing isues
        int job_duration = Integer.parseInt(jTextField3.getText());
        String job_status = (String) jComboBox2.getSelectedItem();
        String job_type = (String) jComboBox1.getSelectedItem();
        updatedJob.setMechanicId(selectedMechanic.getId());
        updatedJob.setDuration(job_duration);
        updatedJob.setStatus(job_status);
        updatedJob.setType(job_type);
        updatedJob.setJobId(selectedJob.getJobId());
        System.out.println(updatedJob.getMechanicId()+ "MECHANIC ID + " + jComboBox6.getSelectedItem());
        String insertJobQuery = "UPDATE garitsdb.Job SET"
                + " mechanic_assigned = '" + updatedJob.getMechanicId()
                + "', job_duration = '" + updatedJob.getDuration() + "', job_status = '"
                + updatedJob.getStatus() + "', job_type = '" + updatedJob.getType()
                + "' WHERE (job_id = '" + updatedJob.getJobId() + "');";

        try {
            dbConnect.write(insertJobQuery);
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        // TODO display window with success message and requery JobForm
        if (evt.getActionCommand().equals("Complete Job")) {
            JOptionPane.showMessageDialog(UpdateJobForm.this,
                    "Invoice Generated");
            allJobs.dispose();
        } else {
            JOptionPane.showMessageDialog(UpdateJobForm.this, "Job details updated!");
        }
        control.OpenMenu();
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setDefaultCloseOperation(UpdateJobForm.DISPOSE_ON_CLOSE);
        jComboBox2.setSelectedItem(selectedJob.getStatus());
        jTextField3.setText(selectedJob.getDuration() + "");
        jComboBox1.setSelectedItem(selectedJob.getType());

        //SPARE PARTS
        modelParts = (DefaultTableModel) jTable6.getModel();
        TableColumn partUsedIdColumn = jTable6.getColumnModel().getColumn(2);
        TableColumn partIdColumn = jTable6.getColumnModel().getColumn(3);
        jTable6.getColumnModel().removeColumn(partUsedIdColumn);
        jTable6.getColumnModel().removeColumn(partIdColumn);
        modelParts.setRowCount(0);
        String partUsedQuery = "SELECT parts.part_price, Part_Used.part_id, parts.part_name, Part_Used.part_used_id, Part_Used.quantity_used \n"
                + "FROM garitsdb.Parts, garitsdb.Part_Used "
                + "WHERE garitsdb.Part_Used.part_id = garitsdb.Parts.part_id "
                + "AND garitsdb.Part_Used.job_id = '" + selectedJob.getJobId() + "';";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(partUsedQuery);
            ResultSet rs = statement.executeQuery();
            while (rs.next()) {
                Part part = new Part();
                part.setPartId(rs.getInt("part_id"));
                part.setPartUsedId(rs.getInt("part_used_id"));
                part.setQty(rs.getInt("quantity_used"));
                part.setName(rs.getString("part_name"));
                part.setPrice(rs.getFloat("part_price"));
                Object[] row = {part.getName(),
                    part.getQty(), part.getPartUsedId(),
                    part.getPartId(), part.getPrice()};
                modelParts.addRow(row);
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //GETTING Uncompleted TASKS
        TableColumn jobIdColumn = jTable3.getColumnModel().getColumn(3);
        TableColumn taskIdColumn = jTable3.getColumnModel().getColumn(2);
        jTable3.getColumnModel().removeColumn(jobIdColumn);
        jTable3.getColumnModel().removeColumn(taskIdColumn);
        jobIdColumn = jTable4.getColumnModel().getColumn(3);
        taskIdColumn = jTable4.getColumnModel().getColumn(2);
        jTable4.getColumnModel().removeColumn(jobIdColumn);
        jTable4.getColumnModel().removeColumn(taskIdColumn);
        modelUncompleted = (DefaultTableModel) jTable4.getModel();
        String uncompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = false AND job_id = "
                + "" + selectedJob.getJobId() + ");";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(uncompletedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelUncompleted.addRow(row);
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //GETTING COMPLETED TASKS
        modelCompleted = (DefaultTableModel) jTable3.getModel();
        String completedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = true AND job_id = "
                + "" + selectedJob.getJobId() + ");";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(completedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelCompleted.addRow(row);
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //Getting all mechanics from db and selecting the correct one
        String mechanicNamesQuery = "SELECT username, user_id FROM garitsdb.User "
                + "WHERE user_role = 'Mechanic' OR user_role = 'Foreperson';";
        ResultSet rs;

        try {
            rs = dbConnect.read(mechanicNamesQuery);

            while (rs.next()) {
                Mechanic mechanic = new Mechanic();
                mechanic.setId(rs.getInt("user_id"));
                mechanic.setName(rs.getString("username"));
                mechanics.add(mechanic);
                jComboBox6.addItem(rs.getString("username"));
                if (mechanic.getId() == selectedJob.getMechanicId()) {
                    jComboBox6.setSelectedItem(rs.getString("username"));
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //Populating dropdown with parts
        String partsQuery = "SELECT * FROM garitsdb.Parts;";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(partsQuery);
            ResultSet partsResults = statement.executeQuery();
            while (partsResults.next()) {
                Part part = new Part();
                part.setPartId(partsResults.getInt("part_id"));
                part.setSupplierId(partsResults.getInt("part_supplier_id"));
                part.setQty(partsResults.getInt("part_quantity"));
                part.setName(partsResults.getString("part_name"));
                part.setPrice(partsResults.getFloat("part_price"));
                spareParts.add(part);
                jComboBox4.addItem(part.getName());
                //RESET PART LIST TO REFLECT NEW QTY's
            }
            conn.commit();
            conn.setAutoCommit(true);
            jComboBox4.setSelectedItem(0);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

    }//GEN-LAST:event_formWindowOpened

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        control.OpenMenu();
        this.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTable4PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable4PropertyChange

    }//GEN-LAST:event_jTable4PropertyChange

    private void jTable4VetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jTable4VetoableChange

    }//GEN-LAST:event_jTable4VetoableChange

    private void jTable4InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable4InputMethodTextChanged

    }//GEN-LAST:event_jTable4InputMethodTextChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO Update database with changes FROM WORK REQUIRED
        if (jTable4.getCellEditor() != null) {
            jTable4.getCellEditor().stopCellEditing();
        }
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();

        for (int row = 0; row < jTable4.getRowCount(); row++) {
            Task currentTask = new Task();
            currentTask.setTaskContent((String) model.getValueAt(row, 0));
            currentTask.setTaskCompleted((boolean) model.getValueAt(row, 1));
            currentTask.setTaskId((int) model.getValueAt(row, 2));
            currentTask.setJobId((int) model.getValueAt(row, 3));
            int isCompleted = currentTask.isTaskCompleted() ? 1 : 0;
            System.out.println(currentTask.getTaskContent() + "TASK");
            String updateTask = "UPDATE `garitsdb`.`Job_Tasks` SET "
                    + "`task_content` = '" + currentTask.getTaskContent() + "',"
                    + "task_completed = '" + isCompleted
                    + "' WHERE (`task_id` = '" + currentTask.getTaskId() + "');";

            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(updateTask);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);

            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }

        modelUncompleted.setRowCount(0);
        String uncompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = false AND job_id = "
                + "" + selectedJob.getJobId() + ");";

        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(uncompletedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelUncompleted.addRow(row);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //QUERY BOTH LIST AGAIN TO REFLECT CHANGES
        modelCompleted.setRowCount(0);
        //GETTING COMPLETED TASKS
        modelCompleted = (DefaultTableModel) jTable3.getModel();
        String completedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = true AND job_id = "
                + "" + selectedJob.getJobId() + ");";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(completedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelCompleted.addRow(row);
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //TODO check if getCellEditor is null and don't stop cell editing otherwise null pointer exception
        //do this for jbutton2 as well
        if (jTable3.getCellEditor() != null) {
            jTable3.getCellEditor().stopCellEditing();
        }
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        for (int row = 0; row < jTable3.getRowCount(); row++) {
            Task currentTask = new Task();
            currentTask.setTaskContent((String) model.getValueAt(row, 0));
            currentTask.setTaskCompleted((boolean) model.getValueAt(row, 1));
            currentTask.setTaskId((int) model.getValueAt(row, 2));
            currentTask.setJobId((int) model.getValueAt(row, 3));
            int isCompleted = currentTask.isTaskCompleted() ? 1 : 0;
            String updateTask = "UPDATE `garitsdb`.`Job_Tasks` SET "
                    + "`task_content` = '" + currentTask.getTaskContent() + "',"
                    + "task_completed = '" + isCompleted
                    + "' WHERE (`task_id` = '" + currentTask.getTaskId() + "');";

            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(updateTask);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);

            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }

        modelCompleted.setRowCount(0);
        String completedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = true AND job_id = "
                + "" + selectedJob.getJobId() + ");";

        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(completedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelCompleted.addRow(row);

            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //QUERY LIST TO REFLECT CHANGES
        modelUncompleted.setRowCount(0);
        String uncompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = false AND job_id = "
                + "" + selectedJob.getJobId() + ");";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(uncompletedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelUncompleted.addRow(row);

            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained

    }//GEN-LAST:event_jTextField2FocusGained

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed

    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusGained
        // TODO add your handling code here:
        clearTaskDone++;
        if (clearTaskDone == 1) {
            jTextField4.setText("");
        }
    }//GEN-LAST:event_jTextField4FocusGained

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
        String taskDone = jTextField4.getText();
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            String insertTaskQuery = "INSERT INTO `garitsdb`.`Job_Tasks`"
                    + " (`job_id`, `task_content`, `task_completed`) VALUES ('"
                    + selectedJob.getJobId() + "', '" + taskDone + "', '"
                    + 1 + "');";
            PreparedStatement statement = conn.prepareStatement(insertTaskQuery);
            statement.execute();

            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //GETTING COMPLETED TASKS
        modelCompleted = (DefaultTableModel) jTable3.getModel();
        modelCompleted.setRowCount(0);
        String completedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = true AND job_id = "
                + "" + selectedJob.getJobId() + ");";
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(completedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelCompleted.addRow(row);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        jTextField4.setText("");
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField5FocusGained
        // TODO add your handling code here:
        clearTaskRequired++;
        if (clearTaskRequired == 1) {
            jTextField5.setText("");
        }
    }//GEN-LAST:event_jTextField5FocusGained

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
        String taskRequired = jTextField5.getText();
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            String insertTaskQuery = "INSERT INTO `garitsdb`.`Job_Tasks`"
                    + " (`job_id`, `task_content`, `task_completed`) VALUES ('"
                    + selectedJob.getJobId() + "', '" + taskRequired + "', '"
                    + 0 + "');";
            PreparedStatement statement = conn.prepareStatement(insertTaskQuery);
            statement.execute();

            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        modelUncompleted.setRowCount(0);
        String uncompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                + " WHERE (task_completed = false AND job_id = "
                + "" + selectedJob.getJobId() + ");";

        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(uncompletedTasksQuery);
            ResultSet rs = statement.executeQuery();
            Task requiredTask = new Task();
            while (rs.next()) {
                requiredTask.setJobId(rs.getInt("job_id"));
                requiredTask.setTaskId(rs.getInt("task_id"));
                requiredTask.setTaskContent(rs.getString("task_content"));
                requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                Object[] row = {requiredTask.getTaskContent(),
                    requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                    requiredTask.getJobId()};
                modelUncompleted.addRow(row);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

        jTextField5.setText("");
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO DELETE TASK
        int[] selectedRow = jTable4.getSelectedRows();
        if (selectedRow.length == 0) {
            //Display window requiring user to select a job to update first
            JOptionPane.showMessageDialog(UpdateJobForm.this,
                    "Select a task to delete first");

        } else {
            String deleteTaskQuery = "DELETE FROM `garitsdb`.`Job_Tasks` "
                    + "WHERE (`task_id` = '" + modelUncompleted.getValueAt(selectedRow[0], 2)
                    + "');";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(deleteTaskQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }

            //REQUERY DB TO DISPLAY CHANGE
            modelUncompleted.setRowCount(0);
            String uncompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                    + " WHERE (task_completed = false AND job_id = "
                    + "" + selectedJob.getJobId() + ");";

            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(uncompletedTasksQuery);
                ResultSet rs = statement.executeQuery();
                Task requiredTask = new Task();
                while (rs.next()) {
                    requiredTask.setJobId(rs.getInt("job_id"));
                    requiredTask.setTaskId(rs.getInt("task_id"));
                    requiredTask.setTaskContent(rs.getString("task_content"));
                    requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                    Object[] row = {requiredTask.getTaskContent(),
                        requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                        requiredTask.getJobId()};
                    modelUncompleted.addRow(row);
                }
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int[] selectedRow = jTable3.getSelectedRows();
        if (selectedRow.length == 0) {
            //Display window requiring user to select a job to update first
            JOptionPane.showMessageDialog(UpdateJobForm.this,
                    "Select a task to delete first");

        } else {
            String deleteTaskQuery = "DELETE FROM `garitsdb`.`Job_Tasks` "
                    + "WHERE (`task_id` = '" + modelCompleted.getValueAt(selectedRow[0], 2)
                    + "');";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(deleteTaskQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }

            //REQUERY DB TO DISPLAY CHANGE
            modelCompleted.setRowCount(0);
            String CompletedTasksQuery = "SELECT * FROM garitsdb.Job_Tasks"
                    + " WHERE (task_completed = true AND job_id = "
                    + "" + selectedJob.getJobId() + ");";

            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(CompletedTasksQuery);
                ResultSet rs = statement.executeQuery();
                Task requiredTask = new Task();
                while (rs.next()) {
                    requiredTask.setJobId(rs.getInt("job_id"));
                    requiredTask.setTaskId(rs.getInt("task_id"));
                    requiredTask.setTaskContent(rs.getString("task_content"));
                    requiredTask.setTaskCompleted(rs.getBoolean("task_completed"));

                    Object[] row = {requiredTask.getTaskContent(),
                        requiredTask.isTaskCompleted(), requiredTask.getTaskId(),
                        requiredTask.getJobId()};
                    modelCompleted.addRow(row);
                }
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        for (Part part : spareParts) {
            if (jComboBox4.getSelectedItem().equals(part.getName())) {
                jSlider1.setMaximum(part.getQty());
                jSlider1.setValue(part.getQty());
                jLabel2.setText(jSlider1.getMaximum() + "");
            }
        }
        MAX_QUANTITY = jSlider1.getMaximum();
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        jLabel2.setText(jSlider1.getValue() + "");
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Part selectedPart = new Part();
        for (Part part : spareParts) {
            if (jComboBox4.getSelectedItem().equals(part.getName())) {
                selectedPart = part;
            }
        }
        if (jSlider1.getValue() > 0) {
            // Add spare part
            String addSpareQuery = "INSERT INTO `garitsdb`.`Part_Used`"
                    + " (`part_id`, `job_id`, `quantity_used`) VALUES ('"
                    + selectedPart.getPartId() + "', '" + selectedJob.getJobId()
                    + "', '" + jSlider1.getValue() + "');";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(addSpareQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);

            } catch (Exception exc) {
                exc.printStackTrace();
            }
            int newQuantity = MAX_QUANTITY - jSlider1.getValue();
            //TODO Subtract part used qty
            String subtractQtyQuery = "UPDATE Parts SET part_quantity = '"
                    + newQuantity + "' WHERE Parts.part_id = '" + selectedPart.getPartId() + "';";

            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(subtractQtyQuery);
                statement.execute();
                conn.commit();
                conn.setAutoCommit(true);

            } catch (Exception exc) {
                exc.printStackTrace();
            }

            for (Part part : spareParts) {
                if (part.getPartId() == selectedPart.getPartId()) {
                    part.setQty(newQuantity);
                    jSlider1.setMaximum(part.getQty());
                }
            }

            //REQUERY PARTS TABLE
            modelParts.setRowCount(0);
            String partUsedQuery = "SELECT parts.part_price, Part_Used.part_id, parts.part_name, Part_Used.part_used_id, Part_Used.quantity_used \n"
                    + "FROM garitsdb.Parts, garitsdb.Part_Used "
                    + "WHERE garitsdb.Part_Used.part_id = garitsdb.Parts.part_id "
                    + "AND garitsdb.Part_Used.job_id = '" + selectedJob.getJobId() + "';";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(partUsedQuery);
                ResultSet rs = statement.executeQuery();
                while (rs.next()) {
                    Part part = new Part();
                    part.setPartId(rs.getInt("part_id"));
                    part.setPartUsedId(rs.getInt("part_used_id"));
                    part.setQty(rs.getInt("quantity_used"));
                    part.setName(rs.getString("part_name"));
                    part.setPrice(rs.getFloat("part_price"));
                    Object[] row = {part.getName(),
                        part.getQty(), part.getPartUsedId(),
                        part.getPartId(), part.getPrice()};
                    modelParts.addRow(row);
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO CHANGE job status to DONE
        selectedJob.setType(jComboBox1.getSelectedItem()+"");
        if(jComboBox1.getSelectedItem().equals("MOT Car")) {
            selectedJob.setFixedCost(50);
        } else if (jComboBox1.getSelectedItem().equals("MOT Van")){
            //ADDING FIXED COST
            selectedJob.setFixedCost(55);
        } else if (jComboBox1.getSelectedItem().equals("Annual Service")) {
            selectedJob.setFixedCost(90);
        } else {
            selectedJob.setFixedCost(0);
        }
        selectedJob.setStatus("Done");
        jComboBox2.setSelectedItem("Done");
        this.jButton5ActionPerformed(evt);
        // create Invoice object with all necessary data
        Invoice invoice = new Invoice();
        invoice.setJobId(selectedJob.getJobId());
        invoice.setJobStart(selectedJob.getDate_start());
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        java.util.Date date = new java.util.Date();
        invoice.setJobEnd(dateFormat.format(date));
        LocalDate futureDate = LocalDate.now().plusMonths(1);
        invoice.setPaymentDueDate(futureDate.toString());
        //GETTING CUSTOMER INFORMATION
        String customerNameQuery = "SELECT customer_name, customer_email, "
                + "customer_tel, customer_address, customer_account_holder, customer_postcode FROM"
                + " garitsdb.Customer WHERE customer_id = " + selectedJob.getCustomerId();
        ResultSet rs;
        try {
            rs = dbConnect.read(customerNameQuery);

            while (rs.next()) {
                invoice.setCustomerName(rs.getString("customer_name"));
                invoice.setCustomerAddress(rs.getString("customer_address"));
                invoice.setCustomerEmail(rs.getString("customer_email"));
                invoice.setCustomerPhone(rs.getString("customer_tel"));
                invoice.setAccountHolder(rs.getBoolean("customer_account_holder"));
                invoice.setCustomerPostCode(rs.getString("customer_postcode"));
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }

        //Getting vehicle information
        String vehicleQuery = "SELECT car_make, car_model FROM garitsdb.Vehicle"
                + " WHERE reg_no = '" + selectedJob.getRegistrationNum() + "';";
        ResultSet results;
        try {
            results = dbConnect.read(vehicleQuery);

            while (results.next()) {
                invoice.setVehicleMake(results.getString("car_make"));
                invoice.setVehicleModel(results.getString("car_model"));
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
        //Calculate amount due using helper functions
        float sparesCost = 0;
        float labourCost = 0;
        float amountDue = 0;
        //ONE AT A TIME, spares, labour, VAT
        float sparesTotal = 0;
        for (int i = 0; i < jTable6.getRowCount(); i++) {
            if(modelParts.getValueAt(i, 0).equals("Oil Filter") ||
                    modelParts.getValueAt(i, 0).equals("Air Filter") ||
                    modelParts.getValueAt(i, 0).equals("Motor Oil")) {
                System.out.println("Cost not added");
            } else {
                float qty = Float.parseFloat(modelParts.getValueAt(i, 1) + "");
                float price = Float.parseFloat(modelParts.getValueAt(i, 4) + "");
                sparesTotal += price * qty;
            }
        }
        sparesCost = invoice.calcMarkUpSpares(sparesTotal);

        //labour
        Mechanic selectedMechanic = new Mechanic();
        for (Mechanic mechanic : mechanics) {
            if (mechanic.getName().equals(jComboBox6.getSelectedItem())) {
                selectedMechanic.setId(mechanic.getId());
                selectedMechanic.setName(mechanic.getName());
            }
        }
        String wageQuery = "SELECT user_pay FROM garitsdb.user"
                + " WHERE user_id = " + selectedMechanic.getId();
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(wageQuery);
            ResultSet resultWage = statement.executeQuery();
            resultWage.next();
            float hourlyRate = resultWage.getFloat("user_pay");
            invoice.setMechanicWage(hourlyRate);
            invoice.setJobDuration(Float.parseFloat(jTextField3.getText()));
            labourCost = invoice.calcLabourCost(
                    invoice.getJobDuration(), hourlyRate);
            conn.commit();
            conn.setAutoCommit(true);

        } catch (Exception exc) {
            exc.printStackTrace();
        }
        //Adding fixed cost for Jobs that have flat rate
        if(jComboBox1.getSelectedItem() == "MOT" || jComboBox1.getSelectedItem()
                == "Annual Service") {
            //WITH VAT
            amountDue += selectedJob.getFixedCost() * 1.2;
        }
        amountDue = invoice.calcTotalWithVat(labourCost, sparesCost);
        invoice.setAmountDue(amountDue);
           
        //SET REMINDER TO FALSE
        invoice.setPaymentReminder(false);
        // TODO ADD INVOICE TO DB
        String insertInvoice = "INSERT INTO `garitsdb`.`Invoice` (`job_id`,"
                + " `invoice_date`, `payment_due_date`, `invoice_total`, `fixed_cost`)"
                + " VALUES ('" + invoice.getJobId() + "', '" + invoice.getJobEnd()
                + "', '" + invoice.getPaymentDueDate() + "', '"
                + invoice.getAmountDue() + "', '" + selectedJob.getFixedCost() +"');";
        int invoiceId = 0;
        try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(insertInvoice,
                    Statement.RETURN_GENERATED_KEYS);
            statement.execute();
            ResultSet generatedKeys = statement.getGeneratedKeys();
            generatedKeys.next();
            invoiceId = generatedKeys.getInt(1);
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        // TODO OPEN INVOICE IN PDF
        String dest = "resources/InvoiceNo" + invoiceId + ".pdf";
        PdfWriter writer = null;
        try {
            writer = new PdfWriter(dest);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UpdateJobForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Creating a PdfDocument       
        PdfDocument pdfDoc = new PdfDocument(writer);

        PdfFont bold = null;
        try {
            bold = PdfFontFactory.createFont(BOLD, true);
        } catch (IOException ex) {
            Logger.getLogger(UpdateJobForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Adding a new page 
        pdfDoc.addNewPage();

        // Creating a Document
        Document document = new Document(pdfDoc);
        //Adding INvoice number
        document.add(
                new Paragraph()
                        .setTextAlignment(TextAlignment.RIGHT)
                        .setMultipliedLeading(1)
                        .add(new Text(String.format("INVOICE NO.: %s\n", invoiceId))
                                .setFontSize(14))
                        .add(invoice.getJobEnd()));
        //Adding adresses
        document.add(getAddressTable(invoice.getCustomerName(),
                invoice.getCustomerAddress(), invoice.getCustomerPostCode(),
                bold));
        document.add(new Paragraph().add("\n"));
        //Adding Vehicle details
        document.add(
                new Paragraph()
                        .setTextAlignment(TextAlignment.LEFT)
                        .setMultipliedLeading(1)
                        .add(new Text(String.format("Dear %s,\n", invoice.getCustomerName())))
                        .add(new Text("\n"))
                        .add(new Text(String.format("Vehicle Registraion No:"
                                + "%s\n", selectedJob.getRegistrationNum())))
                        .add(new Text(String.format("Make: %s\n",
                                invoice.getVehicleMake())))
                        .add(new Text(String.format("Model: %s\n",
                                invoice.getVehicleModel())))
        );
        document.add(new Paragraph().add("\n"));
        //Adding Work done
        document.add(
                new Paragraph()
                        .setTextAlignment(TextAlignment.LEFT)
                        .setMultipliedLeading(1)
                        .add(new Text("Description of work: \n"))
        );
        for (int row = 0; row < modelCompleted.getRowCount(); row++) {
            document.add(new Paragraph().add(
                    row + 1 + ")" + modelCompleted.getValueAt(row, 0))
                    .setMultipliedLeading(1));
        }
        document.add(new Paragraph().add("\n"));

        //Adding Items and calculating costs
        //USED PARTS
        ArrayList<Part> sparesUsed = new ArrayList<Part>();
        for (int row = 0; row < modelParts.getRowCount(); row++) {
            Part part = new Part();
            part.setName((String) modelParts.getValueAt(row, 0));
            part.setPartId((int) modelParts.getValueAt(row, 3));
            part.setPrice((float) modelParts.getValueAt(row, 4));
            part.setQty((int) modelParts.getValueAt(row, 1));
            sparesUsed.add(part);
        }
        document.add(getLineItemTable(invoice, sparesUsed, selectedJob, bold));

        //Ending
        document.add(new Paragraph()
                .add(new Text("Thank you for your valued custom."
                        + "We look forward to receiving your payment"
                        + "in due course.\n"))
                .add(new Text("\n"))
                .add(new Text("Yours sincerely,\n"))
                .add(new Text("\n"))
                .add(new Text("G. Lancaster"))
        );
        // Closing the document
        document.close();

        System.out.println("PDF Created");

        try {
            File pdfFile = new File(dest);
            if (pdfFile.exists()) {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(pdfFile);
                } else {
                    System.out.println("Awt Desktop is not supported!");
                }
            } else {
                System.out.println("File is not exists!");
            }
            System.out.println("Done");

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        // TODO open display invoice form
        DisplayInvoiceForm allInvoices = new DisplayInvoiceForm(control);//FIX NULL CONTROL
        allInvoices.setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateJobForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateJobForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateJobForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateJobForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateJobForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JDialog jDialog4;
    private javax.swing.JDialog jDialog5;
    private javax.swing.JDialog jDialog6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private java.awt.PopupMenu popupMenu1;
    // End of variables declaration//GEN-END:variables
}
