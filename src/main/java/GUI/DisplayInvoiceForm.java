
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Core.Control;
import DatabaseConnect.DBConnect;
import static GUI.UpdateJobForm.BOLD;
import Processing.Invoice;
import Processing.Job;
import static Processing.PDFCreator.getAddressTable;
import static Processing.PDFCreator.getLineItemTable;
import StockControl.Part;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.property.TextAlignment;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jly09
 */
public class DisplayInvoiceForm extends javax.swing.JFrame {
    Control control;
    ForepersonMenuForm fpMenuForm;
    FranchiseeMenuForm franchiseeMenuForm;
    ReceptionistMenuForm receptionMenuForm;
    
    ArrayList<Invoice> invoiceList = new ArrayList<Invoice>();
    DBConnect dbConnect;
    DefaultTableModel invoiceModel;

    /**
     * Creates new form MenuForm
     */
    public DisplayInvoiceForm() {
        initComponents();
        dbConnect = new DBConnect();
    }
    
    public DisplayInvoiceForm(Control c) {
        initComponents();
        
        control = c;
        dbConnect = control.getDatabaseConnector();
        control.getWindowList().add(this);
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    DisplayInvoiceForm(Control c, ForepersonMenuForm fpmf) {
        initComponents();
        
        control = c;
        fpMenuForm = fpmf;
        
        dbConnect = control.getDatabaseConnector();
        control.getWindowList().add(this);
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    DisplayInvoiceForm(Control c, FranchiseeMenuForm fmf) {
        initComponents();
        
        control = c;
        franchiseeMenuForm = fmf;
        
        dbConnect = control.getDatabaseConnector();
        control.getWindowList().add(this);
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    DisplayInvoiceForm(Control c, ReceptionistMenuForm rmf) {
        initComponents();
        
        control = c;
        receptionMenuForm = rmf;
        
        dbConnect = control.getDatabaseConnector();
        control.getWindowList().add(this);
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    @Override
    public void dispose() {
        super.dispose();
        control.terminateThread();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        back_btn = new javax.swing.JButton();
        logout_butn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Display and Print");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Job No.", "Job Start Date", "Job End Date", "Customer Name", "Customer Type", "Email", "Phone", "Address", "Payment Total", "Reminder"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton5.setText("Print Invoice");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Invoice");

        jButton6.setText("Mark as Paid");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        back_btn.setText("Back");
        back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_btnActionPerformed(evt);
            }
        });

        logout_butn.setText("Logout");
        logout_butn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_butnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1035, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(back_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logout_butn)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_btn)
                    .addComponent(logout_butn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO Create list of invoice objects with all necessary data 
        // to create a pdf
        String invoiceQuery = "SELECT * FROM garitsdb.Invoice;";
        try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(invoiceQuery);
                ResultSet rs = statement.executeQuery();
                while(rs.next()) {
                    Invoice invoice = new Invoice();
                    invoice.setInvoiceId(rs.getInt("invoice_id"));
                    invoice.setJobId(rs.getInt("job_id"));
                    invoice.setJobEnd(rs.getString("invoice_date"));
                    invoice.setPaymentDueDate(rs.getString("payment_due_date"));
                    invoice.setAmountDue(rs.getFloat("invoice_total"));
                    invoice.setIsPaid(rs.getBoolean("invoice_paid"));
                    invoice.setFixedCost(rs.getFloat("fixed_cost"));
                    invoiceList.add(invoice);
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        
        
        //Query Job table
        for(Invoice invoice : invoiceList) {
            String jobQuery = "SELECT * FROM garitsdb.Job WHERE job_id = '"
                    + invoice.getJobId() +"';";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(jobQuery);
                ResultSet rs = statement.executeQuery();
                while(rs.next()) {
                    invoice.setJobStart(rs.getString("job_date"));
                    invoice.setRegNum(rs.getString("reg_no"));
                    invoice.setCustomerId(rs.getInt("customer_id"));
                    invoice.setMechanicAssigned(rs.getInt("mechanic_assigned"));
                    invoice.setJobDuration(rs.getInt("job_duration"));
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
        
        //Query Customer table
        for(Invoice invoice : invoiceList) {
            String customerQuery = "SELECT * FROM garitsdb.Customer WHERE "
                    + "customer_id = '" + invoice.getCustomerId() + "';";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(customerQuery);
                ResultSet rs = statement.executeQuery();
                while(rs.next()) {
                    invoice.setCustomerName(rs.getString("customer_name"));
                    invoice.setCustomerAddress(rs.getString("customer_address"));
                    invoice.setCustomerPostCode(rs.getString("customer_postcode"));
                    invoice.setCustomerPhone(rs.getString("customer_tel"));
                    invoice.setCustomerEmail(rs.getString("customer_email"));
                    invoice.setAccountHolder(rs.getBoolean(
                            "customer_account_holder"));
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
        
        //TODO Implement payment reminders 
        //TODO Hide invoice column
        invoiceModel = (DefaultTableModel) jTable1.getModel();
        invoiceModel.setRowCount(0);
        for(Invoice invoice : invoiceList) {
            Object[] row = { invoice.getJobId(), invoice.getJobStart(),
            invoice.getJobEnd(), invoice.getCustomerName(), 
            invoice.isAccountHolder(), invoice.getCustomerEmail(), 
            invoice.getCustomerPhone(), invoice.getCustomerAddress(),
            invoice.getAmountDue(), invoice};
            invoiceModel.addRow(row);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO create invoice pdf and open it
        int[] selectedRow = jTable1.getSelectedRows();
        if(selectedRow.length == 0) {
            //Display window requiring user to select a job to update first
            JOptionPane.showMessageDialog(DisplayInvoiceForm.this,
                    "Select an invoice to print first");
            
        } else {
            Invoice invoice = (Invoice) jTable1.getValueAt(selectedRow[0], 9);
            //GETTING MISSING INVOICE DATA
            
            //VEHICLE DATA
            String vehicleQuery = "SELECT car_make, car_model FROM garitsdb.Vehicle"
                    + " WHERE reg_no = '" + invoice.getRegNum() + "';"; 
            ResultSet results;
            try {
                results = dbConnect.read(vehicleQuery);

                while(results.next()) {
                    invoice.setVehicleMake(results.getString("car_make"));
                    invoice.setVehicleModel(results.getString("car_model"));
                }

            }
            catch (Exception exc) {
                exc.printStackTrace();
            }
            
            //WORK DONE
            ArrayList<String> tasksCompleted = new ArrayList<>();
            String workDoneQuery = "SELECT task_content FROM garitsdb.Job_Tasks"
                    + " WHERE task_completed = '1' AND job_id ='"
                    + invoice.getJobId() + "';";
            ResultSet rs;
            try {
                rs = dbConnect.read(workDoneQuery);

                while(rs.next()) {
                    tasksCompleted.add(rs.getString("task_content"));
                }

            }
            catch (Exception exc) {
                exc.printStackTrace();
            }
            
            //Mechanic WAGE
            String wageQuery = "SELECT hourly_rate FROM garitsdb.Mechanic"
                + " WHERE user_id = " + invoice.getMechanicAssigned();
            try { 
                    Connection conn = dbConnect.connect();
                    conn.setAutoCommit(false);
                    PreparedStatement statement = conn.prepareStatement(wageQuery);
                    ResultSet resultWage = statement.executeQuery();
                    resultWage.next();
                    float hourlyRate = resultWage.getFloat("hourly_rate");
                    invoice.setMechanicWage(hourlyRate);
                    conn.commit();
                    conn.setAutoCommit(true);

                } catch (Exception exc) {
                   exc.printStackTrace();
            }
            
            //SPARE PARTS USED
            ArrayList<Part> sparesUsed = new ArrayList<Part>();
            String partUsedQuery = "SELECT parts.part_price, Part_Used.part_id,"
                    + " parts.part_name, Part_Used.quantity_used \n" +
                    "FROM garitsdb.Parts, garitsdb.Part_Used " +
                    "WHERE garitsdb.Part_Used.part_id = garitsdb.Parts.part_id " +
                    "AND garitsdb.Part_Used.job_id = '" + invoice.getJobId() + "';";
            try {
                Connection conn = dbConnect.connect();
                conn.setAutoCommit(false);
                PreparedStatement statement = conn.prepareStatement(partUsedQuery);
                ResultSet partsUsed = statement.executeQuery();
                while(partsUsed.next()) {
                    Part part = new Part();
                    part.setPartId(partsUsed.getInt("part_id"));
                    part.setQty(partsUsed.getInt("quantity_used"));
                    part.setName(partsUsed.getString("part_name"));
                    part.setPrice(partsUsed.getFloat("part_price"));
                    sparesUsed.add(part);
                }
                conn.commit();
                conn.setAutoCommit(true);
            } catch (Exception exc) {
                exc.printStackTrace();
            }
            
            // TODO OPEN INVOICE IN PDF
            String dest = "resources/InvoiceNo" + invoice.getInvoiceId() + ".pdf";       
            PdfWriter writer = null; 
            try {
                writer = new PdfWriter(dest);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UpdateJobForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Creating a PdfDocument       
            PdfDocument pdfDoc = new PdfDocument(writer); 

            PdfFont bold = null;
            try {
                bold = PdfFontFactory.createFont(BOLD, true);
            } catch (IOException ex) {
                Logger.getLogger(UpdateJobForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Adding a new page 
            pdfDoc.addNewPage();               

            // Creating a Document
            Document document = new Document(pdfDoc);
            //Adding INvoice number
            document.add(
                    new Paragraph()
                            .setTextAlignment(TextAlignment.RIGHT)
                            .setMultipliedLeading(1)
                            .add(new Text(String.format("INVOICE NO.: %s\n",
                                    invoice.getInvoiceId())).setFontSize(14))
                            .add(invoice.getJobEnd()));    
            //Adding adresses
            document.add(getAddressTable(invoice.getCustomerName(),
                    invoice.getCustomerAddress(), invoice.getCustomerPostCode(),
                    bold));
            document.add(new Paragraph().add("\n"));
            //Adding Vehicle details
            document.add(
                    new Paragraph()
                            .setTextAlignment(TextAlignment.LEFT)
                            .setMultipliedLeading(1)
                            .add(new Text(String.format("Dear %s,\n", invoice.getCustomerName())))
                            .add(new Text("\n"))
                            .add(new Text(String.format("Vehicle Registraion No:"
                                    + "%s\n", invoice.getRegNum())))
                            .add(new Text(String.format("Make: %s\n", 
                                    invoice.getVehicleMake())))
                            .add(new Text(String.format("Model: %s\n", 
                                    invoice.getVehicleModel())))

            );
            document.add(new Paragraph().add("\n"));
            //Adding Work done
            document.add(
                    new Paragraph()
                            .setTextAlignment(TextAlignment.LEFT)
                            .setMultipliedLeading(1)
                            .add(new Text("Description of work: \n"))                       
            );
            for(int row = 0; row < tasksCompleted.size(); row++) {
                document.add(new Paragraph().add(
                        row+1+")"+ tasksCompleted.get(row))
                        .setMultipliedLeading(1));
            }
            document.add(new Paragraph().add("\n"));

            //Adding Items and calculating costs
            Job dummyJob = new Job();
            dummyJob.setFixedCost(invoice.getFixedCost());
            //USED PARTS
            document.add(getLineItemTable(invoice, sparesUsed, dummyJob, bold));

            //Ending
            document.add(new Paragraph()
                    .add(new Text("Thank you for your valued custom."
                            + "We look forward to receiving your payment"
                            + "in due course.\n"))
                    .add(new Text("\n"))
                    .add(new Text("Yours sincerely,\n"))
                    .add(new Text("\n"))
                    .add(new Text("G. Lancaster"))
            );
            // Closing the document
            document.close();

            System.out.println("PDF Created");
            
            try {

		File pdfFile = new File(dest);
		if (pdfFile.exists()) {

			if (Desktop.isDesktopSupported()) {
				Desktop.getDesktop().open(pdfFile);
			} else {
				System.out.println("Awt Desktop is not supported!");
			}

		} else {
			System.out.println("File is not exists!");
		}

		System.out.println("Done");

            } catch (Exception ex) {
                  ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int[] selectedRow = jTable1.getSelectedRows();
        if(selectedRow.length == 0) {
            //Display window requiring user to select a job to update first
            JOptionPane.showMessageDialog(DisplayInvoiceForm.this,
                    "Select an invoice to print first");
            
        } else {
            Invoice invoice = (Invoice) jTable1.getValueAt(selectedRow[0], 9);
            String markPaidQuery = "UPDATE `garitsdb`.`invoice` SET "
                    + "`invoice_paid` = '1' WHERE (`invoice_id` = '"
                    + invoice.getInvoiceId() + "');";
            try {
            Connection conn = dbConnect.connect();
            conn.setAutoCommit(false);
            PreparedStatement statement = conn.prepareStatement(markPaidQuery);
            statement.execute();
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception exc) {
            exc.printStackTrace();
        }
            JOptionPane.showMessageDialog(DisplayInvoiceForm.this,
                    "Job has been paid");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_btnActionPerformed
        control.OpenMenu();
        this.dispose();
    }//GEN-LAST:event_back_btnActionPerformed

    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_login_btnActionPerformed

    private void logout_butnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_butnActionPerformed
        control.logout();
        this.dispose();
    }//GEN-LAST:event_logout_butnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayInvoiceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayInvoiceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayInvoiceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayInvoiceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayInvoiceForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_btn;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton logout_butn;
    // End of variables declaration//GEN-END:variables
}
